<?php

/**
 * Implements hook_permission().
 */
function dlts_image_permission() {
  return array(
    'administer dlts' => array(
      'title' => t('administer dlts'),
      'description' => t('Administer the settings for the DLTS Image widgets and formatters, including the location of the Djatoka server.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function dlts_image_menu() {
  return array(
    'admin/config/media/dlts-image' => array(
      'title' => t('DLTS Image'),
      'description' => t('Provides an extended Image Field for displaying high-resolution images using OpenLayers and Djatoka JPEG 2000 Image Server.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dlts_image_admin'),
      'access arguments' => array('administer dlts'),
      'file' => 'dlts_image.admin.inc',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dlts_image_theme($existing, $type, $theme, $path) {
  return array(
    'dlts_image_hires' => array(
      'variables' => array(
        'file' => NULL,
      ),
    ),
  );
}

/**
 * Implements DLTS Image widgets and formatters.
 */
function dlts_image_field_info() {
  return array(
    'dlts_image' => array(
      'label' => t('DLTS Image'),
      'description' => t('This field stores the ID of an image file as an integer value.'),
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
        'default_image' => 0,
        'display_field' => 0,
        'display_default' => 0,
      ),
      'instance_settings' => array(
        'file_extensions' => 'jp2 tif tiff',
        'file_directory' => '',
        'max_filesize' => '',
      ),
      'default_widget' => 'dlts_image',
      'default_formatter' => 'dlts_image_hires',
    ),
  );
}

function dlts_image_field_settings_form($field, $instance, $has_data) {
  return file_field_settings_form($field, $instance, $has_data);
}

/**
* Implements hook_field_instance_settings_form().
*/
function dlts_image_field_instance_settings_form($field, $instance) {

  // Use the file field instance settings form as a basis.
  $form = file_field_instance_settings_form($field, $instance);

  // Remove the description option.
  unset($form['description_field']);

  // Remove the file_extensions option, we only accept jp2, tif, tiff.
  unset($form['file_extensions']);

  return $form;
}

function dlts_image_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Add display_field setting to field because file_field_widget_form() assumes it is set.
  // $field['settings']['display_field'] = 0;

  $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  $settings = $instance['settings'];

  $supported_extensions = array('tiff', 'tif', 'jp2');

  foreach (element_children($elements) as $delta) {
    $elements[$delta]['#upload_validators']['file_validate_extensions'][0] = implode(' ', $supported_extensions);
    // Add all extra functionality provided by the image widget.
    $elements[$delta]['#process'][] = 'dlts_image_field_widget_process';
  }
  if ($field['cardinality'] == 1) {
    // If there's only one field, return it as delta 0.
    if (empty($elements[0]['#default_value']['fid'])) {
      $elements[0]['#description'] = theme('file_upload_help', array('description' => $instance['description'], 'upload_validators' => $elements[0]['#upload_validators']));
    }
  }
  else {
    $elements['#file_upload_description'] = theme('file_upload_help', array('upload_validators' => $elements[0]['#upload_validators']));
  }
  return $elements;
}

function dlts_image_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  file_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_presave().
 */
function dlts_image_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_insert().
 */
function dlts_image_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $key => $item) {
    if (!isset($item['djakota_width'])) {
      $djatoka = dlts_image_djatoka_request($item);
      if (!isset($djatoka['error'])) {
        $items[$key]['djakota_width'] = $djatoka['width'];
        $items[$key]['djakota_height'] = $djatoka['height'];
        $items[$key]['djakota_levels'] = $djatoka['levels'];
        $items[$key]['djakota_dwtLevels'] = $djatoka['dwtLevels'];
        $items[$key]['djakota_compositingLayerCount'] = $djatoka['compositingLayerCount'];
      }
    }
  }
  file_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function dlts_image_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function dlts_image_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function dlts_image_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_is_empty().
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_is_empty/7
 */
function dlts_image_field_is_empty($item, $field) {
  return file_field_is_empty($item, $field);
}

function dlts_image_field_widget_process($element, &$form_state, $form) {

  $item = $element['#value'];
  $item['fid'] = $element['fid']['#value'];
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];
  $widget_settings = $instance['widget']['settings'];

  $element['#theme'] = 'dlts_image_widget';

  // Add the image preview.
  if ($element['#file']) {

    $variables = array('path' => $element['#file']->uri);

    /**
     * Determine image dimensions and metadata
     * If djakota_*  is available, the others will also be available
     */
    if (isset($element['#value']['djakota_width'])) {
      $variables['djakota_width'] = $element['#value']['djakota_width'];
      $variables['djakota_height'] = $element['#value']['djakota_height'];
      $variables['djakota_levels'] = $element['#value']['djakota_levels'];
      $variables['djakota_dwtLevels'] = $element['#value']['djakota_dwtLevels'];
      $variables['djakota_compositingLayerCount'] = $element['#value']['djakota_compositingLayerCount'];
      $variables['width'] = $element['#value']['djakota_width'];
      $variables['height'] = $element['#value']['djakota_height'];
    }

    /**
     * Call Djakota Image Server
     */
    else {
      $djatoka = dlts_image_djatoka_request($element['#file']);

      if (!isset($djatoka['error'])) {
        $variables['djakota_width'] = $djatoka['width'];
        $variables['djakota_height'] = $djatoka['height'];
        $variables['djakota_levels'] = $djatoka['levels'];
        $variables['djakota_dwtLevels'] = $djatoka['dwtLevels'];
        $variables['djakota_compositingLayerCount'] = $djatoka['compositingLayerCount'];
      }
      else {
        form_set_error('dlts_image', t('Error requesting image metadata from Djakota service. @message (error code @code).', array('@message' => $djatoka['message'], '@error' => $djatoka['error'])));
        $variables['djakota_width'] =
        $variables['djakota_height'] =
        $variables['djakota_levels'] =
        $variables['djakota_dwtLevels'] =
        $variables['djakota_compositingLayerCount'] = 0;
      }
    }

    /** Store the data in the form */

    $element['width'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_width'],
    );

    $element['height'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_height'],
    );

    $element['djakota_width'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_width'],
    );

    $element['djakota_height'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_height'],
    );

    $element['djakota_levels'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_levels'],
    );

    $element['djakota_dwtLevels'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_dwtLevels'],
    );

    $element['djakota_compositingLayerCount'] = array(
      '#type' => 'hidden',
      '#value' => $variables['djakota_compositingLayerCount'],
    );

  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
  function dlts_image_field_widget_info() {
  return array(
    'dlts_image' => array(
      'label' => t('DLTS Image'),
      'field types' => array('dlts_image'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'none',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function dlts_image_field_widget_settings_form($field, $instance) {
  return image_field_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_formatter_info().
 */
function dlts_image_field_formatter_info() {
  return array(
    'dlts_image_hires' => array(
      'label' => t('DLTS Hi-Res Image'),
      'field types' => array('dlts_image'),
      'description' => t('Displays image files in their original size.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function dlts_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'dlts_image_hires') {
    foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'dlts_image_hires',
          '#file' => $item,
        );
    }
  }
  return $element;
}

/**
 * DLTS Image theme functions
 */

/**
 * Returns HTML for a high-resolution JPEG 2000 image.
 *
 * This function returns the necessary HTML elements, and sets certain
 * JavaScript settings for the file being displayed. The given elements are
 * then replaced by OpenLayers with a zoomable version of the image.
 *
 * @ingroup themable
 */
function theme_dlts_image_hires($variables) {

  $file = $variables['file'];

  $fid = 'id-'. $file['fid'];

  $fileUri = file_create_url($file['uri']);

  if ( isset ( $file['timestamp'] ) ) $fileUri = $fileUri . '?v=' . $file['timestamp'];

  /** Add Openlayers to the page */
  drupal_add_js(variable_get('dlts_image_openlayers_source', 'sites/all/libraries/openlayers/lib/OpenLayers.js'), array('group' => JS_LIBRARY));

  if (!isset($file['djakota_width'])) {
  	$djatoka = dlts_image_djatoka_request($file);
	if (!isset($file['djakota_width'])) {
      $file['djakota_width'] = $djatoka['width'];
      $file['djakota_height'] = $djatoka['height'];
      $file['djakota_levels'] = $djatoka['levels'];
      $file['djakota_dwtLevels'] = $djatoka['dwtLevels'];
      $file['djakota_compositingLayerCount'] = $djatoka['compositingLayerCount'];
	}
  }

  $openlayers_options = array(
    'service' => variable_get('dlts_image_djatoka_service', 'http://localhost:8080/adore-djatoka'),
    'imgMetadata' => array(
      'width' => $file['djakota_width'],
      'height' => $file['djakota_height'],
      'levels' => $file['djakota_levels'],
      'dwtLevels' => $file['djakota_dwtLevels'],
      'compositingLayerCount' => $file['djakota_compositingLayerCount'],

    ),
    'zoom' => isset($file['zoom']) ? $file['zoom'] : 1,
  );

  $js_inline = '(function(O){O.DLTS.Page("'. $fid .'","'.  $fileUri .'",'. json_encode($openlayers_options) .')})(OpenLayers);';

  $js_options = array(
    'group' => JS_DEFAULT,
    'type' => 'inline',
    'every_page' => FALSE,
    'weight' => 5,
    'scope' => 'footer',
    'cache' => TRUE,
    'defer' => TRUE,
  );

  drupal_add_js($js_inline, $js_options);

  $options = array(
    '@id' => $fid,
    '@uri' => $fileUri,
    '@width' => $file['djakota_width'],
    '@height' => $file['djakota_height'],
    '@levels' => $file['djakota_levels'],
    '@dwtLevels' => $file['djakota_dwtLevels'],
    '@layer' => $file['djakota_compositingLayerCount'],
  );

  return t('<div id="@id" class="dlts_image_map" data-uri="@uri" data-width="@width" data-height="@height" data-levels="@levels" data-dwtLevels="@dwtLevels" data-compositing-layer="@layer"></div>', $options);

}

/**
 * Djatoka request
 */
function dlts_image_djatoka_request($file) {

  $file = (object) $file;

  $service_url = variable_get('dlts_image_djatoka_service', 'http://localhost:8080/adore-djatoka');

  $rft_id = file_create_url($file->uri);

  if ( isset ( $file->timestamp ) ) $rft_id = $rft_id . '?v=' . $file->timestamp;

  if (!empty($service_url)) {

    $request = url($service_url . '/resolver', array('absolute' => TRUE, 'query' => array('url_ver' => 'Z39.88-2004', 'svc_id' => 'info:lanl-repo/svc/getMetadata', 'rft_id' => $rft_id)));

    $response = drupal_http_request($request);

    if ($response->code == '200' && isset($response->data)) {
      return drupal_json_decode($response->data);
    }
    else {
      watchdog('dlts_image', 'Error requesting image metadata from Djakota service (url @url). @message (error code @code). Please verify that the ' . l('DLTS Image', 'admin/config/media/dlts-image') . ' module is properly configured. ', array( '@message' => $response->error, '@code' => $response->code, '@url' => $request ), WATCHDOG_ERROR);
      return array(
        'message' => isset($response->status_message) ? $response->status_message : $response->error,
        'error' => $response->error,
        'code' => $response->code,
      );
    }
  }
  else {
    $msg = 'Error requesting image metadata from Djakota service. Please configure Djatoka Jpeg 2000 Image Server.';
    watchdog('dlts_image', $msg, array(), WATCHDOG_ERROR);
    return array(
      'message' => $msg,
      'error' => 404,
      'code' => 404,
    );
  }
}